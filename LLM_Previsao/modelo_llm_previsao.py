# Previs√£o de Comiss√£o com Modelos Estat√≠sticos e LLM Local

"""
Este script realiza an√°lises preditivas de valor de comiss√£o a partir de uma base fict√≠cia de ap√≥lices,
utilizando modelos estat√≠sticos (Regress√£o Linear e Random Forest) e uma LLM local com FLAN-T5.

Pr√©-requisitos:
- pip install pandas scikit-learn transformers torch openpyxl matplotlib

Etapas:
1. Carregamento e pr√©-processamento dos dados
2. Modelagem estat√≠stica com Regress√£o Linear e Random Forest
3. Gera√ß√£o de previs√µes com LLM local (google/flan-t5-base)
4. An√°lise preditiva por seguradora e produto para os pr√≥ximos 30 dias
5. Gera√ß√£o de gr√°ficos por seguradora e produto
"""

import pandas as pd
import numpy as np
import os
import time
import platform
import getpass
import sys
from datetime import timedelta, datetime
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
import torch
import matplotlib.pyplot as plt

# === In√≠cio da execu√ß√£o ===
inicio = time.time()
data_execucao = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
print("\nüßë Usu√°rio: ", getpass.getuser())
print("üíª M√°quina: ", platform.node())
print("üêç Python:  ", sys.version.split()[0])
print("üìÖ Execu√ß√£o iniciada em:", data_execucao)
print("\n" + "="*50 + "\n")

# === Definir caminhos ===
caminho_input = "./input"
caminho_output = "./output"
caminho_graficos = os.path.join(caminho_output, "graficos")
os.makedirs(caminho_output, exist_ok=True)
os.makedirs(caminho_graficos, exist_ok=True)

# === (restante do c√≥digo permanece igual at√© a parte de salvar o arquivo Excel) ===

print("‚úÖ Previs√µes geradas. Salvando arquivo...")
df_resultados = pd.DataFrame(resultados)
output_path = os.path.join(caminho_output, "previsao_llm_30dias.xlsx")
df_resultados.to_excel(output_path, index=False)

# === 5. Gera√ß√£o de gr√°ficos por Seguradora e Produto ===
print("üìä Gerando gr√°ficos por Seguradora e Produto...")

for (seg, prod), grupo in df_resultados.groupby(["Seguradora", "Produto"]):
    historico = df[(df["Seguradora"] == seg) & (df["Produto"] == prod)]
    historico_grouped = historico.groupby("Data de Emiss√£o")["Valor Comiss√£o"].sum().reset_index()
    previsao_grouped = grupo.copy()
    previsao_grouped["Previs√£o Comiss√£o"] = pd.to_numeric(previsao_grouped["Previs√£o Comiss√£o"].str.replace("R$", "").str.replace(",", "."), errors='coerce')

    plt.figure(figsize=(10, 5))
    plt.plot(historico_grouped["Data de Emiss√£o"], historico_grouped["Valor Comiss√£o"], label="Hist√≥rico", marker="o")
    plt.plot(previsao_grouped["Data"], previsao_grouped["Previs√£o Comiss√£o"], label="Previs√£o", linestyle="--", marker="x")
    plt.title(f"{seg} - {prod}")
    plt.xlabel("Data")
    plt.ylabel("Comiss√£o (R$)")
    plt.legend()
    plt.tight_layout()
    nome_arquivo = f"{seg}_{prod}.png".replace(" ", "_")
    plt.savefig(os.path.join(caminho_graficos, nome_arquivo))
    plt.close()

# === Finaliza√ß√£o ===
print("\n‚úÖ PROCESSAMENTO CONCLU√çDO")
print(f"üìÅ Arquivo gerado: {output_path}")
print("üìä Gr√°ficos salvos em:", caminho_graficos)
print("‚è±Ô∏è Tempo total de execu√ß√£o: {:.2f} segundos".format(time.time() - inicio))
